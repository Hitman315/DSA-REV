

class Solution
{
	public:
	void dfs(stack<int>&st,vector<int>adj[],vector<bool>&visited,int node){
	    visited[node]=true;
	    for(auto it:adj[node]){
	        if(!visited[it]){
	            dfs(st,adj,visited,it);
	        }
	    }
	    st.push(node);
	}
	void revdfs(vector<int>transpose[],int node,vector<bool>&visited){
	    visited[node]=true;
	    for(auto it:transpose[node]){
	        if(!visited[it]){
	            revdfs(transpose,it,visited);
	        }
	    }
	}
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<int> adj[])
    {
        //step 1:Topological sort
        stack<int>st;
        vector<bool>visited(V,false);
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs(st,adj,visited,i);
            }
        }
        
        //step 2:Transpose the graph
      vector<int>transpose[V];
      for(int i=0;i<V;i++){
          //Make the visited node as false again
          visited[i]=false;
          for(auto it:adj[i]){
              transpose[it].push_back(i);
          }
      }
      
      //step 3:Dfs traversal of graph in reverse order
      int count=0;
      while(!st.empty()){
          int front=st.top();
          st.pop();
          if(!visited[front]){
              revdfs(transpose,front,visited);
              count++;
          }
      }
      return count;
    }
};